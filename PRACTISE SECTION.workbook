---
uti: com.xamarin.workbook
id: 71f2c848-f29c-4d1a-bd15-3f173760fe3d
title: PRACTISE section
platforms:
- Console
---

```csharp
      string [] userserver = new string[]{"user0", "user1", "user2"};
string [] passwordserver = new string[] {"password0", "password1", "password2"};

void logging ( string userid , string passwordid )
{

    int userindex = Array.IndexOf (userserver,userid);
    int passwordindex = Array.IndexOf(passwordserver,passwordid);

    if (userindex == passwordindex)
    {
        Console.WriteLine("login successsful ");
    }
    else 
    {
        Console.WriteLine(" login unsuccessful");
    }

}

logging("user1","password1");
```

```csharp
int[] odd_num = new int[]{1,3,5,7};
string[] names = new string[]{"skdfj","sdfjsdfl"};


odd_num.Contains(1);
Array.IndexOf(odd_num, 1);

//username = sjdbf
//password = slkdfsld

//check for valid user/pwd
//cross-check user/pwd
```

```csharp
/*
password calculator

userServer = ["user0", "user1", "user2"]
passswordServer = ["password0", "password1", "password2"]

check for valid login
*/

int[] userserver = new int[]{11,22,33};
int[] passwordserver = new int[] {999,888,777};

int userindex = Array.IndexOf (userserver,11);
int passwordindex = Array.IndexOf(passwordserver,888);

if (userindex == passwordindex)
{
    Console.WriteLine("login successsful ");
}
else 
{
    Console.WriteLine(" password incorrect");
}
```

```csharp

string [] userserver = new string[]{"user0", "user1", "user2"};
string [] passwordserver = new string[] {"password0", "password1", "password2"};

int userindex = Array.IndexOf (userserver,"user1");
int passwordindex = Array.IndexOf(passwordserver,"password1");

if (userindex == passwordindex)
{
    Console.WriteLine("login successsful ");
}
else 
{
    Console.WriteLine(" login unsuccessful");
}
```

```csharp
string [] userserver = new string[]{"user0", "user1", "user2"};
string [] passwordserver = new string[] {"password0", "password1", "password2"};

void logging ( string userid , string passwordid )
{
   bool isuservalid =  userserver.Contains(userid);
    Console.WriteLine(isuservalid);
    if (    isuservalid )
    {
         Console.WriteLine(" user available ");
    }
    else
    {
         Console.WriteLine(" user unavailable ");
         return ;
    }

    int userindex = Array.IndexOf (userserver,userid);
    int passwordindex = Array.IndexOf(passwordserver,passwordid);

    if (userindex == passwordindex)
    {
        Console.WriteLine("login successsful ");
    }
    else 
    {
        Console.WriteLine(" login unsuccessful");
    }

}

logging("ncdjncjdnc","password1");
```

```csharp
int q = 11;
if ((q %2)==1)
{
    q+=12;
    Console.WriteLine(q);
}
```

```csharp
// void int == no returns 
int Addwith2 (int param1)
{
    int val = (param1 + 2);
    //Console.WriteLine(val);
    return val;
}
Addwith2(12);
```

```csharp
for (int i = 0; i<=3; i++)
{
    //i++;
    Console.WriteLine(i);
    //i++;
}
```

```csharp
/*Adding items in a list*/

List<float> prices = new List<float>();

prices.Add(10.2f);
prices.Add(23.4f);
prices.Add(20.9f);
prices.Add(25.4f);

float totalprices = 0;
for(int i=0; i<prices.Count; i++)
{
    Console.WriteLine($"index of {i} is {prices[i]}");
    totalprices += prices[i];
    Console.WriteLine($"total price at {i} is {totalprices}");
    
}

Console.WriteLine("total prices = " + totalprices);
```

```csharp
/*   price calculator (BILL)

1. scanning product code (input) 
2. the code gets product price (output)
3. similarly all products [ prouducts list ](adding)
4. total price
5. price according to given discount = Total price
6. cross check all products through given BILL 

NECESSARY things

product 
product code 
product price
all should be in list (price.add)
Total price 
discount conversion  
products list == given bill product items 

*/
```

```csharp
Dictionary<int, string> indexes = new Dictionary<int, string>();
indexes.Add(1, "First");
indexes.Add(2, "Second");
indexes.Add(3, "Third");
indexes.Add(4, "Four");

int givenid = 2;
string givenpwd = "Second";

if(indexes.ContainsKey(givenid))
{
    if(givenpwd == indexes[givenid])
    {
        Console.WriteLine("login successful");
    }
    else
    {
        Console.WriteLine("login unsuccessful");
    }
}
else
{
    Console.WriteLine("user not available");
}
```

```csharp
 Dictionary<string, string> logins = new Dictionary<string, string>();
logins.Add("user1", "Password1");
logins.Add("user2", "Password2");
logins.Add("user3", "Password3");
logins.Add("user4", "Password4");

string givenuser = ("user1");
string givenpwd = ("password1");

if( logins.ContainsKey(givenuser))
{
    if( givenpwd == logins[givenuser])
    {
        Console.WriteLine("login successful");
    }

    else
    {
         Console.WriteLine("login unsuccessful");
    }

}

else
{
    Console.WriteLine("user not available");
}
```

```csharp
/* DO CLOTHES BILLING 
Essential things product ,quantity , price 
*/

// --------DATABASE for clothing 
// declaring clothing STRUCT

struct ClothesProduct
{
    public int ProductId;
    public string ProductName;
    public float ProductPrice;
    public float ProductDiscount;

}

//create Tracks instance
ClothesProduct Tracks = new ClothesProduct();             //percentage conversion 
Tracks.ProductId = 1;
Tracks.ProductName = "Tracks";
Tracks.ProductPrice = 550.34f;
Tracks.ProductDiscount = 10;

//create SportsWear instance
ClothesProduct SportsWear = new ClothesProduct();
SportsWear.ProductId = 2;
SportsWear.ProductName = "SportsWear";
SportsWear.ProductPrice = 200.23F;
SportsWear.ProductDiscount = 5;

//create Shirt instance
ClothesProduct Shirt  = new ClothesProduct();
Shirt .ProductId = 3;
Shirt .ProductName = "Shirt";
Shirt .ProductPrice = 600.54f;
Shirt .ProductDiscount = 0.9f;

//create Lowers instance
ClothesProduct Lowers = new ClothesProduct();
Lowers.ProductId = 4;
Lowers.ProductName = "Lowers";
Lowers.ProductPrice = 400.45f;
Lowers.ProductDiscount = 0.9f;


//Create database of ClotheProducts
Dictionary<int, ClothesProduct>  ClotheProducts = new Dictionary<int, ClothesProduct>();
ClotheProducts.Add(Tracks.ProductId, Tracks);
ClotheProducts.Add(SportsWear.ProductId, SportsWear);
ClotheProducts.Add(Shirt.ProductId, Shirt);
ClotheProducts.Add(Lowers.ProductId, Lowers);


//-----------Billing----------------------
//create Bill struct
struct BillProduct
{
    //constructors
    BillProduct(ClothesProduct _Clothe, int _quantity)
    {
        Clothe = _Clothe;
        Quantity = _quantity;
    }
    public ClothesProduct Clothe;
    public int Quantity;
    
    public float GetBillPrice()
    {
        return (Clothe.ProductPrice * Clothe.ProductDiscount) * Quantity;
    }
}

//create Bill Database
Dictionary<int, BillProduct> BillData = new Dictionary<int, BillProduct>();

//Scan for products
//scanned item #3
BillData.Add(1, new BillProduct())
```

```csharp

// ------DATA TYPES------

// #1 Basic data types
    int q = 12;
    float w = 13;
    long e = 12475376502;
    string r = "berywam";

//#2 ARRAYS   
    List<int> even = new List<int>(){2,4,6,8}; // can store one type of data , and also you can add 
    even.Add(10);

    int[] odd = new int[3]{1,3,5};

    Dictionary<int,string> logins = new Dictionary<int,string>{    // you can store any two data types and moreover        its similar to list in case of adding 
        {123 , "pass"},
        {456, "word"}
    };
    Console.WriteLine(logins[123]);

//  #3 STRUCTS

    struct Clothes// you can add more than two data types 
    {
        public int ClotheID; //Field
        public string ClotheName; //Field
        public float ClothePrice; //Field
        public float ClotheDiscount; //Field
        
        public float GetDicountedPrice() //Method
        {
            Console.WriteLine("Dicounted price: " + (ClotheDiscount * ClothePrice));
            return (ClotheDiscount * ClothePrice);
        }
    }

    Clothes Tracks = new Clothes (); // creating struct instance/ variable 
    Tracks. ClotheID = 5550;
    Tracks.ClotheName = "Tracks";
    Tracks.ClothePrice = 1234.1f;
    Tracks.ClotheDiscount = 0.9f;
    Tracks.GetDicountedPrice();
```

```csharp

struct Fruits
{
    // constructor
    public Fruits ( int _id, string _name, float _price)
    {
        id = _id;
        name = _name;
        price = _price ;       
    }
    public int id;
    public string name;
    public float price;
}

Fruits watermelon = new Fruits ( 145, " watermelon", 87.3f);
Console.WriteLine(watermelon.id);


// decleration and assigining
int q; // decleration 
int w = 13; //decleration and assigining values
```

```csharp
struct Fruits
{
    public int fruitId;
    public string  fruitname;
    public float fruitprice;
    public float Discountprice;
     public float getdiscountprice()
    {
        Console.WriteLine("discountprice =" + (Discountprice * fruitprice ));
        return (Discountprice * fruitprice );
    }
}

Fruits apple = new Fruits();
apple.fruitId = 123;
apple.fruitname = "apple";
apple.fruitprice = 20.3f;
apple.Discountprice = 0.9f;

apple.getdiscountprice();
```